/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/activities": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.activities.id"];
          created_at?: parameters["rowFilter.activities.created_at"];
          environment?: parameters["rowFilter.activities.environment"];
          description?: parameters["rowFilter.activities.description"];
          amountOfPlayers?: parameters["rowFilter.activities.amountOfPlayers"];
          activityWinner?: parameters["rowFilter.activities.activityWinner"];
          activityLoser?: parameters["rowFilter.activities.activityLoser"];
          killCounts?: parameters["rowFilter.activities.killCounts"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["activities"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** activities */
          activities?: definitions["activities"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.activities.id"];
          created_at?: parameters["rowFilter.activities.created_at"];
          environment?: parameters["rowFilter.activities.environment"];
          description?: parameters["rowFilter.activities.description"];
          amountOfPlayers?: parameters["rowFilter.activities.amountOfPlayers"];
          activityWinner?: parameters["rowFilter.activities.activityWinner"];
          activityLoser?: parameters["rowFilter.activities.activityLoser"];
          killCounts?: parameters["rowFilter.activities.killCounts"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.activities.id"];
          created_at?: parameters["rowFilter.activities.created_at"];
          environment?: parameters["rowFilter.activities.environment"];
          description?: parameters["rowFilter.activities.description"];
          amountOfPlayers?: parameters["rowFilter.activities.amountOfPlayers"];
          activityWinner?: parameters["rowFilter.activities.activityWinner"];
          activityLoser?: parameters["rowFilter.activities.activityLoser"];
          killCounts?: parameters["rowFilter.activities.killCounts"];
        };
        body: {
          /** activities */
          activities?: definitions["activities"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/contracts": {
    get: {
      parameters: {
        query: {
          contract_address?: parameters["rowFilter.contracts.contract_address"];
          created_at?: parameters["rowFilter.contracts.created_at"];
          updated_at?: parameters["rowFilter.contracts.updated_at"];
          name?: parameters["rowFilter.contracts.name"];
          symbol?: parameters["rowFilter.contracts.symbol"];
          decimals?: parameters["rowFilter.contracts.decimals"];
          chain_id?: parameters["rowFilter.contracts.chain_id"];
          network_name?: parameters["rowFilter.contracts.network_name"];
          network_rpc?: parameters["rowFilter.contracts.network_rpc"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["contracts"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** contracts */
          contracts?: definitions["contracts"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          contract_address?: parameters["rowFilter.contracts.contract_address"];
          created_at?: parameters["rowFilter.contracts.created_at"];
          updated_at?: parameters["rowFilter.contracts.updated_at"];
          name?: parameters["rowFilter.contracts.name"];
          symbol?: parameters["rowFilter.contracts.symbol"];
          decimals?: parameters["rowFilter.contracts.decimals"];
          chain_id?: parameters["rowFilter.contracts.chain_id"];
          network_name?: parameters["rowFilter.contracts.network_name"];
          network_rpc?: parameters["rowFilter.contracts.network_rpc"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          contract_address?: parameters["rowFilter.contracts.contract_address"];
          created_at?: parameters["rowFilter.contracts.created_at"];
          updated_at?: parameters["rowFilter.contracts.updated_at"];
          name?: parameters["rowFilter.contracts.name"];
          symbol?: parameters["rowFilter.contracts.symbol"];
          decimals?: parameters["rowFilter.contracts.decimals"];
          chain_id?: parameters["rowFilter.contracts.chain_id"];
          network_name?: parameters["rowFilter.contracts.network_name"];
          network_rpc?: parameters["rowFilter.contracts.network_rpc"];
        };
        body: {
          /** contracts */
          contracts?: definitions["contracts"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/payouts": {
    get: {
      parameters: {
        query: {
          /** Id of the payout in the payouts table. */
          id?: parameters["rowFilter.payouts.id"];
          created_at?: parameters["rowFilter.payouts.created_at"];
          public_address?: parameters["rowFilter.payouts.public_address"];
          /** Amount to be paid out in */
          payment_amount?: parameters["rowFilter.payouts.payment_amount"];
          /** Token symbol of the payment */
          payment_token_symbol?: parameters["rowFilter.payouts.payment_token_symbol"];
          /** Contract address for the payment token. */
          payment_token_address?: parameters["rowFilter.payouts.payment_token_address"];
          room_id?: parameters["rowFilter.payouts.room_id"];
          /** Any notes necessary for the payment. Ex: "winner, 2 kills" */
          notes?: parameters["rowFilter.payouts.notes"];
          /** Reason for the payment. Ex: 'winner' or 'kills' */
          payment_reason?: parameters["rowFilter.payouts.payment_reason"];
          /** If the payment has been completed */
          payment_completed?: parameters["rowFilter.payouts.payment_completed"];
          /** Time when payment was completed. */
          payment_completed_at?: parameters["rowFilter.payouts.payment_completed_at"];
          /** The transaction hash of the payment once completed. */
          payment_transaction_hash?: parameters["rowFilter.payouts.payment_transaction_hash"];
          /** Network name for the payment token. */
          payment_token_network_name?: parameters["rowFilter.payouts.payment_token_network_name"];
          /** Network RPC for the payment token. */
          payment_token_network_rpc?: parameters["rowFilter.payouts.payment_token_network_rpc"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["payouts"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** payouts */
          payouts?: definitions["payouts"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          /** Id of the payout in the payouts table. */
          id?: parameters["rowFilter.payouts.id"];
          created_at?: parameters["rowFilter.payouts.created_at"];
          public_address?: parameters["rowFilter.payouts.public_address"];
          /** Amount to be paid out in */
          payment_amount?: parameters["rowFilter.payouts.payment_amount"];
          /** Token symbol of the payment */
          payment_token_symbol?: parameters["rowFilter.payouts.payment_token_symbol"];
          /** Contract address for the payment token. */
          payment_token_address?: parameters["rowFilter.payouts.payment_token_address"];
          room_id?: parameters["rowFilter.payouts.room_id"];
          /** Any notes necessary for the payment. Ex: "winner, 2 kills" */
          notes?: parameters["rowFilter.payouts.notes"];
          /** Reason for the payment. Ex: 'winner' or 'kills' */
          payment_reason?: parameters["rowFilter.payouts.payment_reason"];
          /** If the payment has been completed */
          payment_completed?: parameters["rowFilter.payouts.payment_completed"];
          /** Time when payment was completed. */
          payment_completed_at?: parameters["rowFilter.payouts.payment_completed_at"];
          /** The transaction hash of the payment once completed. */
          payment_transaction_hash?: parameters["rowFilter.payouts.payment_transaction_hash"];
          /** Network name for the payment token. */
          payment_token_network_name?: parameters["rowFilter.payouts.payment_token_network_name"];
          /** Network RPC for the payment token. */
          payment_token_network_rpc?: parameters["rowFilter.payouts.payment_token_network_rpc"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          /** Id of the payout in the payouts table. */
          id?: parameters["rowFilter.payouts.id"];
          created_at?: parameters["rowFilter.payouts.created_at"];
          public_address?: parameters["rowFilter.payouts.public_address"];
          /** Amount to be paid out in */
          payment_amount?: parameters["rowFilter.payouts.payment_amount"];
          /** Token symbol of the payment */
          payment_token_symbol?: parameters["rowFilter.payouts.payment_token_symbol"];
          /** Contract address for the payment token. */
          payment_token_address?: parameters["rowFilter.payouts.payment_token_address"];
          room_id?: parameters["rowFilter.payouts.room_id"];
          /** Any notes necessary for the payment. Ex: "winner, 2 kills" */
          notes?: parameters["rowFilter.payouts.notes"];
          /** Reason for the payment. Ex: 'winner' or 'kills' */
          payment_reason?: parameters["rowFilter.payouts.payment_reason"];
          /** If the payment has been completed */
          payment_completed?: parameters["rowFilter.payouts.payment_completed"];
          /** Time when payment was completed. */
          payment_completed_at?: parameters["rowFilter.payouts.payment_completed_at"];
          /** The transaction hash of the payment once completed. */
          payment_transaction_hash?: parameters["rowFilter.payouts.payment_transaction_hash"];
          /** Network name for the payment token. */
          payment_token_network_name?: parameters["rowFilter.payouts.payment_token_network_name"];
          /** Network RPC for the payment token. */
          payment_token_network_rpc?: parameters["rowFilter.payouts.payment_token_network_rpc"];
        };
        body: {
          /** payouts */
          payouts?: definitions["payouts"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/players": {
    get: {
      parameters: {
        query: {
          room_id?: parameters["rowFilter.players.room_id"];
          slug?: parameters["rowFilter.players.slug"];
          player?: parameters["rowFilter.players.player"];
          time_joined?: parameters["rowFilter.players.time_joined"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["players"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** players */
          players?: definitions["players"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          room_id?: parameters["rowFilter.players.room_id"];
          slug?: parameters["rowFilter.players.slug"];
          player?: parameters["rowFilter.players.player"];
          time_joined?: parameters["rowFilter.players.time_joined"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          room_id?: parameters["rowFilter.players.room_id"];
          slug?: parameters["rowFilter.players.slug"];
          player?: parameters["rowFilter.players.player"];
          time_joined?: parameters["rowFilter.players.time_joined"];
        };
        body: {
          /** players */
          players?: definitions["players"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/room_params": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.room_params.id"];
          /** Public Address of creator */
          created_by?: parameters["rowFilter.room_params.created_by"];
          slug?: parameters["rowFilter.room_params.slug"];
          /** Address where the alt split rewards should be sent. */
          alt_split_address?: parameters["rowFilter.room_params.alt_split_address"];
          /** Token cost in order to enter the game */
          entry_fee?: parameters["rowFilter.room_params.entry_fee"];
          /** Chance that a PvE event will occur */
          pve_chance?: parameters["rowFilter.room_params.pve_chance"];
          /** Chance that a revive event will occur */
          revive_chance?: parameters["rowFilter.room_params.revive_chance"];
          /** Total prize split for kills in the game */
          prize_kills?: parameters["rowFilter.room_params.prize_kills"];
          /** Total prize split designated to go to the alternate address. */
          prize_alt_split?: parameters["rowFilter.room_params.prize_alt_split"];
          /** Total prize split for the game winner */
          prize_first?: parameters["rowFilter.room_params.prize_first"];
          /** Total prize split for 2nd place */
          prize_second?: parameters["rowFilter.room_params.prize_second"];
          /** Total prize split for third place */
          prize_third?: parameters["rowFilter.room_params.prize_third"];
          /** Total prize split designated for the developers of Rumble Raffle */
          prize_creator?: parameters["rowFilter.room_params.prize_creator"];
          created_at?: parameters["rowFilter.room_params.created_at"];
          updated_at?: parameters["rowFilter.room_params.updated_at"];
          contract_id?: parameters["rowFilter.room_params.contract_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["room_params"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** room_params */
          room_params?: definitions["room_params"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.room_params.id"];
          /** Public Address of creator */
          created_by?: parameters["rowFilter.room_params.created_by"];
          slug?: parameters["rowFilter.room_params.slug"];
          /** Address where the alt split rewards should be sent. */
          alt_split_address?: parameters["rowFilter.room_params.alt_split_address"];
          /** Token cost in order to enter the game */
          entry_fee?: parameters["rowFilter.room_params.entry_fee"];
          /** Chance that a PvE event will occur */
          pve_chance?: parameters["rowFilter.room_params.pve_chance"];
          /** Chance that a revive event will occur */
          revive_chance?: parameters["rowFilter.room_params.revive_chance"];
          /** Total prize split for kills in the game */
          prize_kills?: parameters["rowFilter.room_params.prize_kills"];
          /** Total prize split designated to go to the alternate address. */
          prize_alt_split?: parameters["rowFilter.room_params.prize_alt_split"];
          /** Total prize split for the game winner */
          prize_first?: parameters["rowFilter.room_params.prize_first"];
          /** Total prize split for 2nd place */
          prize_second?: parameters["rowFilter.room_params.prize_second"];
          /** Total prize split for third place */
          prize_third?: parameters["rowFilter.room_params.prize_third"];
          /** Total prize split designated for the developers of Rumble Raffle */
          prize_creator?: parameters["rowFilter.room_params.prize_creator"];
          created_at?: parameters["rowFilter.room_params.created_at"];
          updated_at?: parameters["rowFilter.room_params.updated_at"];
          contract_id?: parameters["rowFilter.room_params.contract_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.room_params.id"];
          /** Public Address of creator */
          created_by?: parameters["rowFilter.room_params.created_by"];
          slug?: parameters["rowFilter.room_params.slug"];
          /** Address where the alt split rewards should be sent. */
          alt_split_address?: parameters["rowFilter.room_params.alt_split_address"];
          /** Token cost in order to enter the game */
          entry_fee?: parameters["rowFilter.room_params.entry_fee"];
          /** Chance that a PvE event will occur */
          pve_chance?: parameters["rowFilter.room_params.pve_chance"];
          /** Chance that a revive event will occur */
          revive_chance?: parameters["rowFilter.room_params.revive_chance"];
          /** Total prize split for kills in the game */
          prize_kills?: parameters["rowFilter.room_params.prize_kills"];
          /** Total prize split designated to go to the alternate address. */
          prize_alt_split?: parameters["rowFilter.room_params.prize_alt_split"];
          /** Total prize split for the game winner */
          prize_first?: parameters["rowFilter.room_params.prize_first"];
          /** Total prize split for 2nd place */
          prize_second?: parameters["rowFilter.room_params.prize_second"];
          /** Total prize split for third place */
          prize_third?: parameters["rowFilter.room_params.prize_third"];
          /** Total prize split designated for the developers of Rumble Raffle */
          prize_creator?: parameters["rowFilter.room_params.prize_creator"];
          created_at?: parameters["rowFilter.room_params.created_at"];
          updated_at?: parameters["rowFilter.room_params.updated_at"];
          contract_id?: parameters["rowFilter.room_params.contract_id"];
        };
        body: {
          /** room_params */
          room_params?: definitions["room_params"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rooms": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.rooms.id"];
          created_at?: parameters["rowFilter.rooms.created_at"];
          /** The room slug */
          slug?: parameters["rowFilter.rooms.slug"];
          params_id?: parameters["rowFilter.rooms.params_id"];
          created_by?: parameters["rowFilter.rooms.created_by"];
          game_started?: parameters["rowFilter.rooms.game_started"];
          /** The given rooms payout_id */
          payout_id?: parameters["rowFilter.rooms.payout_id"];
          /** Total prize purse depending on amount of players when game starts. */
          total_prize_purse?: parameters["rowFilter.rooms.total_prize_purse"];
          contract_id?: parameters["rowFilter.rooms.contract_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["rooms"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** rooms */
          rooms?: definitions["rooms"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.rooms.id"];
          created_at?: parameters["rowFilter.rooms.created_at"];
          /** The room slug */
          slug?: parameters["rowFilter.rooms.slug"];
          params_id?: parameters["rowFilter.rooms.params_id"];
          created_by?: parameters["rowFilter.rooms.created_by"];
          game_started?: parameters["rowFilter.rooms.game_started"];
          /** The given rooms payout_id */
          payout_id?: parameters["rowFilter.rooms.payout_id"];
          /** Total prize purse depending on amount of players when game starts. */
          total_prize_purse?: parameters["rowFilter.rooms.total_prize_purse"];
          contract_id?: parameters["rowFilter.rooms.contract_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.rooms.id"];
          created_at?: parameters["rowFilter.rooms.created_at"];
          /** The room slug */
          slug?: parameters["rowFilter.rooms.slug"];
          params_id?: parameters["rowFilter.rooms.params_id"];
          created_by?: parameters["rowFilter.rooms.created_by"];
          game_started?: parameters["rowFilter.rooms.game_started"];
          /** The given rooms payout_id */
          payout_id?: parameters["rowFilter.rooms.payout_id"];
          /** Total prize purse depending on amount of players when game starts. */
          total_prize_purse?: parameters["rowFilter.rooms.total_prize_purse"];
          contract_id?: parameters["rowFilter.rooms.contract_id"];
        };
        body: {
          /** rooms */
          rooms?: definitions["rooms"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/users": {
    get: {
      parameters: {
        query: {
          public_address?: parameters["rowFilter.users.public_address"];
          created_at?: parameters["rowFilter.users.created_at"];
          nonce?: parameters["rowFilter.users.nonce"];
          id?: parameters["rowFilter.users.id"];
          name?: parameters["rowFilter.users.name"];
          updated_at?: parameters["rowFilter.users.updated_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["users"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** users */
          users?: definitions["users"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          public_address?: parameters["rowFilter.users.public_address"];
          created_at?: parameters["rowFilter.users.created_at"];
          nonce?: parameters["rowFilter.users.nonce"];
          id?: parameters["rowFilter.users.id"];
          name?: parameters["rowFilter.users.name"];
          updated_at?: parameters["rowFilter.users.updated_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          public_address?: parameters["rowFilter.users.public_address"];
          created_at?: parameters["rowFilter.users.created_at"];
          nonce?: parameters["rowFilter.users.nonce"];
          id?: parameters["rowFilter.users.id"];
          name?: parameters["rowFilter.users.name"];
          updated_at?: parameters["rowFilter.users.updated_at"];
        };
        body: {
          /** users */
          users?: definitions["users"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  activities: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: public.environment_enum
     * @enum {string}
     */
    environment: "PVP" | "PVE" | "REVIVE";
    /** Format: text */
    description: string;
    /** Format: numeric */
    amountOfPlayers: number;
    /** Format: ARRAY */
    activityWinner?: unknown[];
    /** Format: ARRAY */
    activityLoser?: unknown[];
    /** Format: ARRAY */
    killCounts?: unknown[];
  };
  /** @description Information for any contracts used. */
  contracts: {
    /**
     * Format: character varying
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    contract_address: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at: string;
    /** Format: character varying */
    name: string;
    /** Format: character varying */
    symbol: string;
    /** Format: character varying */
    decimals: string;
    /** Format: character varying */
    chain_id: string;
    /** Format: character varying */
    network_name: string;
    /** Format: character varying */
    network_rpc: string;
  };
  /** @description Payout information for all completed games */
  payouts: {
    /**
     * Format: uuid
     * @description Id of the payout in the payouts table.
     *
     * Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: character varying */
    public_address: string;
    /**
     * Format: numeric
     * @description Amount to be paid out in
     */
    payment_amount: number;
    /**
     * Format: character varying
     * @description Token symbol of the payment
     */
    payment_token_symbol: string;
    /**
     * Format: character varying
     * @description Contract address for the payment token.
     */
    payment_token_address: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `rooms.id`.<fk table='rooms' column='id'/>
     */
    room_id: string;
    /**
     * Format: character varying
     * @description Any notes necessary for the payment. Ex: "winner, 2 kills"
     */
    notes?: string;
    /**
     * Format: public.payment_reason
     * @description Reason for the payment. Ex: 'winner' or 'kills'
     * @enum {string}
     */
    payment_reason:
      | "winner"
      | "second"
      | "third"
      | "kills"
      | "alt_split"
      | "creator_split";
    /**
     * Format: boolean
     * @description If the payment has been completed
     */
    payment_completed: boolean;
    /**
     * Format: timestamp with time zone
     * @description Time when payment was completed.
     */
    payment_completed_at?: string;
    /**
     * Format: character varying
     * @description The transaction hash of the payment once completed.
     */
    payment_transaction_hash?: string;
    /**
     * Format: character varying
     * @description Network name for the payment token.
     */
    payment_token_network_name: string;
    /**
     * Format: character varying
     * @description Network RPC for the payment token.
     */
    payment_token_network_rpc: string;
  };
  /** @description Players in each room. */
  players: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `rooms.id`.<fk table='rooms' column='id'/>
     */
    room_id: string;
    /** Format: character varying */
    slug: string;
    /**
     * Format: character varying
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `users.public_address`.<fk table='users' column='public_address'/>
     */
    player: string;
    /**
     * Format: timestamp without time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    time_joined: string;
  };
  /** @description Holds all parameters of each room */
  room_params: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: character varying
     * @description Public Address of creator
     *
     * Note:
     * This is a Foreign Key to `users.public_address`.<fk table='users' column='public_address'/>
     */
    created_by: string;
    /** Format: character varying */
    slug: string;
    /**
     * Format: character varying
     * @description Address where the alt split rewards should be sent.
     */
    alt_split_address: string;
    /**
     * Format: numeric
     * @description Token cost in order to enter the game
     */
    entry_fee: number;
    /**
     * Format: numeric
     * @description Chance that a PvE event will occur
     */
    pve_chance: number;
    /**
     * Format: numeric
     * @description Chance that a revive event will occur
     */
    revive_chance: number;
    /**
     * Format: numeric
     * @description Total prize split for kills in the game
     */
    prize_kills: number;
    /**
     * Format: numeric
     * @description Total prize split designated to go to the alternate address.
     */
    prize_alt_split: number;
    /**
     * Format: numeric
     * @description Total prize split for the game winner
     */
    prize_first: number;
    /**
     * Format: numeric
     * @description Total prize split for 2nd place
     */
    prize_second: number;
    /**
     * Format: numeric
     * @description Total prize split for third place
     */
    prize_third: number;
    /**
     * Format: numeric
     * @description Total prize split designated for the developers of Rumble Raffle
     */
    prize_creator: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at: string;
    /**
     * Format: character varying
     * @description Note:
     * This is a Foreign Key to `contracts.contract_address`.<fk table='contracts' column='contract_address'/>
     */
    contract_id: string;
  };
  /** @description Available rooms to join. */
  rooms: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: text
     * @description The room slug
     */
    slug: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `room_params.id`.<fk table='room_params' column='id'/>
     */
    params_id: string;
    /**
     * Format: character varying
     * @description Note:
     * This is a Foreign Key to `users.public_address`.<fk table='users' column='public_address'/>
     */
    created_by: string;
    /** Format: boolean */
    game_started: boolean;
    /**
     * Format: uuid
     * @description The given rooms payout_id
     */
    payout_id?: string;
    /**
     * Format: numeric
     * @description Total prize purse depending on amount of players when game starts.
     */
    total_prize_purse?: number;
    /**
     * Format: character varying
     * @description Note:
     * This is a Foreign Key to `contracts.contract_address`.<fk table='contracts' column='contract_address'/>
     */
    contract_id: string;
  };
  /** @description Users that have logged into the app */
  users: {
    /**
     * Format: character varying
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    public_address: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: character varying */
    nonce: string;
    /**
     * Format: uuid
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: text */
    name: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description activities */
  "body.activities": definitions["activities"];
  /** Format: uuid */
  "rowFilter.activities.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.activities.created_at": string;
  /** Format: public.environment_enum */
  "rowFilter.activities.environment": string;
  /** Format: text */
  "rowFilter.activities.description": string;
  /** Format: numeric */
  "rowFilter.activities.amountOfPlayers": string;
  /** Format: ARRAY */
  "rowFilter.activities.activityWinner": string;
  /** Format: ARRAY */
  "rowFilter.activities.activityLoser": string;
  /** Format: ARRAY */
  "rowFilter.activities.killCounts": string;
  /** @description contracts */
  "body.contracts": definitions["contracts"];
  /** Format: character varying */
  "rowFilter.contracts.contract_address": string;
  /** Format: timestamp with time zone */
  "rowFilter.contracts.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.contracts.updated_at": string;
  /** Format: character varying */
  "rowFilter.contracts.name": string;
  /** Format: character varying */
  "rowFilter.contracts.symbol": string;
  /** Format: character varying */
  "rowFilter.contracts.decimals": string;
  /** Format: character varying */
  "rowFilter.contracts.chain_id": string;
  /** Format: character varying */
  "rowFilter.contracts.network_name": string;
  /** Format: character varying */
  "rowFilter.contracts.network_rpc": string;
  /** @description payouts */
  "body.payouts": definitions["payouts"];
  /**
   * Format: uuid
   * @description Id of the payout in the payouts table.
   */
  "rowFilter.payouts.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.payouts.created_at": string;
  /** Format: character varying */
  "rowFilter.payouts.public_address": string;
  /**
   * Format: numeric
   * @description Amount to be paid out in
   */
  "rowFilter.payouts.payment_amount": string;
  /**
   * Format: character varying
   * @description Token symbol of the payment
   */
  "rowFilter.payouts.payment_token_symbol": string;
  /**
   * Format: character varying
   * @description Contract address for the payment token.
   */
  "rowFilter.payouts.payment_token_address": string;
  /** Format: uuid */
  "rowFilter.payouts.room_id": string;
  /**
   * Format: character varying
   * @description Any notes necessary for the payment. Ex: "winner, 2 kills"
   */
  "rowFilter.payouts.notes": string;
  /**
   * Format: public.payment_reason
   * @description Reason for the payment. Ex: 'winner' or 'kills'
   */
  "rowFilter.payouts.payment_reason": string;
  /**
   * Format: boolean
   * @description If the payment has been completed
   */
  "rowFilter.payouts.payment_completed": string;
  /**
   * Format: timestamp with time zone
   * @description Time when payment was completed.
   */
  "rowFilter.payouts.payment_completed_at": string;
  /**
   * Format: character varying
   * @description The transaction hash of the payment once completed.
   */
  "rowFilter.payouts.payment_transaction_hash": string;
  /**
   * Format: character varying
   * @description Network name for the payment token.
   */
  "rowFilter.payouts.payment_token_network_name": string;
  /**
   * Format: character varying
   * @description Network RPC for the payment token.
   */
  "rowFilter.payouts.payment_token_network_rpc": string;
  /** @description players */
  "body.players": definitions["players"];
  /** Format: uuid */
  "rowFilter.players.room_id": string;
  /** Format: character varying */
  "rowFilter.players.slug": string;
  /** Format: character varying */
  "rowFilter.players.player": string;
  /** Format: timestamp without time zone */
  "rowFilter.players.time_joined": string;
  /** @description room_params */
  "body.room_params": definitions["room_params"];
  /** Format: uuid */
  "rowFilter.room_params.id": string;
  /**
   * Format: character varying
   * @description Public Address of creator
   */
  "rowFilter.room_params.created_by": string;
  /** Format: character varying */
  "rowFilter.room_params.slug": string;
  /**
   * Format: character varying
   * @description Address where the alt split rewards should be sent.
   */
  "rowFilter.room_params.alt_split_address": string;
  /**
   * Format: numeric
   * @description Token cost in order to enter the game
   */
  "rowFilter.room_params.entry_fee": string;
  /**
   * Format: numeric
   * @description Chance that a PvE event will occur
   */
  "rowFilter.room_params.pve_chance": string;
  /**
   * Format: numeric
   * @description Chance that a revive event will occur
   */
  "rowFilter.room_params.revive_chance": string;
  /**
   * Format: numeric
   * @description Total prize split for kills in the game
   */
  "rowFilter.room_params.prize_kills": string;
  /**
   * Format: numeric
   * @description Total prize split designated to go to the alternate address.
   */
  "rowFilter.room_params.prize_alt_split": string;
  /**
   * Format: numeric
   * @description Total prize split for the game winner
   */
  "rowFilter.room_params.prize_first": string;
  /**
   * Format: numeric
   * @description Total prize split for 2nd place
   */
  "rowFilter.room_params.prize_second": string;
  /**
   * Format: numeric
   * @description Total prize split for third place
   */
  "rowFilter.room_params.prize_third": string;
  /**
   * Format: numeric
   * @description Total prize split designated for the developers of Rumble Raffle
   */
  "rowFilter.room_params.prize_creator": string;
  /** Format: timestamp with time zone */
  "rowFilter.room_params.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.room_params.updated_at": string;
  /** Format: character varying */
  "rowFilter.room_params.contract_id": string;
  /** @description rooms */
  "body.rooms": definitions["rooms"];
  /** Format: uuid */
  "rowFilter.rooms.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.rooms.created_at": string;
  /**
   * Format: text
   * @description The room slug
   */
  "rowFilter.rooms.slug": string;
  /** Format: uuid */
  "rowFilter.rooms.params_id": string;
  /** Format: character varying */
  "rowFilter.rooms.created_by": string;
  /** Format: boolean */
  "rowFilter.rooms.game_started": string;
  /**
   * Format: uuid
   * @description The given rooms payout_id
   */
  "rowFilter.rooms.payout_id": string;
  /**
   * Format: numeric
   * @description Total prize purse depending on amount of players when game starts.
   */
  "rowFilter.rooms.total_prize_purse": string;
  /** Format: character varying */
  "rowFilter.rooms.contract_id": string;
  /** @description users */
  "body.users": definitions["users"];
  /** Format: character varying */
  "rowFilter.users.public_address": string;
  /** Format: timestamp with time zone */
  "rowFilter.users.created_at": string;
  /** Format: character varying */
  "rowFilter.users.nonce": string;
  /** Format: uuid */
  "rowFilter.users.id": string;
  /** Format: text */
  "rowFilter.users.name": string;
  /** Format: timestamp with time zone */
  "rowFilter.users.updated_at": string;
}

export interface operations {}

export interface external {}
